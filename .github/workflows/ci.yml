# This workflow defines the Continuous Integration (CI) and Continuous Deployment (CD) pipeline
# for the Simple Task Manager application.

name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Production deployment will be triggered by pushes to main
      - develop # Staging deployment will be triggered by pushes to develop
  pull_request:
    branches:
      - develop # Staging deployment will be triggered by Pull Requests to develop

# Global environment variables for the workflow
env:
  AZURE_CONTAINER_REGISTRY: rm06stm92cyrveb.azurecr.io
  AZURE_RESOURCE_GROUP: simple-task-manager-rg
  AZURE_CONTAINER_APP_ENV: simple-task-manager-env

  # IMPORTANT: Replace <YOUR_RANDOM_SUFFIX> with the suffix generated by Terraform (e.g., 92cyrveb)
  # You can get this from your Terraform outputs (terraform output suffix) or by looking at your app names in Azure Portal
  APP_NAME_SUFFIX: 92cyrveb

jobs:
  # -----------------------------------------------------------------------------------
  # CI Checks Job: Runs tests and dependency scans for both backend and frontend
  # -----------------------------------------------------------------------------------
  ci_checks:
    name: CI Checks (Tests & Scans)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    # Backend CI Steps
    - name: Set up Node.js for Backend
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install Backend Dependencies
      run: cd backend && npm ci

    # DevSecOps: Backend Dependency Vulnerability Scan
    - name: Run Backend Dependency Audit
      run: cd backend && npm audit --audit-level=high || true

    - name: Run Backend Tests
      run: cd backend && npm test

    # Frontend CI Steps
    - name: Set up Node.js for Frontend
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Frontend Dependencies
      run: cd frontend && npm ci

    # DevSecOps: Frontend Dependency Vulnerability Scan
    - name: Run Frontend Dependency Audit
      run: cd frontend && npm audit --audit-level=high || true

    - name: Run Frontend Tests
      run: cd frontend && npm test

  # -----------------------------------------------------------------------------------
  # Staging Deployment Job: Builds, pushes, and deploys to staging environment
  # -----------------------------------------------------------------------------------
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: ci_checks 
    environment: staging

    if: |
      (github.event_name == 'pull_request' && github.base_ref == 'develop') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # --- Azure Login for CLI commands ---
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    # --- Docker Login to Azure Container Registry ---
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    # --- Build Backend Image ---
    - name: Build backend image
      run: docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/simple-task-backend:latest ./backend

    # DevSecOps: Scan Backend Image for Vulnerabilities (using Trivy)
    - name: Scan backend image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.AZURE_CONTAINER_REGISTRY }}/simple-task-backend:latest
        format: 'table'
        exit-code: '1'
        severity: 'HIGH,CRITICAL'

    - name: Push backend image to ACR
      run: docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/simple-task-backend:latest

    # --- Build Frontend Image ---
    - name: Build frontend image
      run: docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/simple-task-frontend:latest ./frontend

    # DevSecOps: Scan Frontend Image for Vulnerabilities
    - name: Scan frontend image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.AZURE_CONTAINER_REGISTRY }}/simple-task-frontend:latest
        format: 'table'
        exit-code: '1' 
        severity: 'HIGH,CRITICAL' 

    - name: Push frontend image to ACR
      run: docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/simple-task-frontend:latest

    # --- Deploy to Staging Container Apps (Update existing apps) ---

    - name: Get Backend App URL for Frontend
      id: get_backend_url 
      run: |
        # Query the FQDN of the backend app using its full name (with suffix)
        BACKEND_APP_FQDN=$(az containerapp show \
          --name simple-task-backend-app-${{ env.APP_NAME_SUFFIX }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.latestRevisionFqdn \
          --output tsv)
        
        echo "backend_fqdn=$BACKEND_APP_FQDN" >> "$GITHUB_OUTPUT"
        echo "Fetched Backend FQDN: $BACKEND_APP_FQDN"


    - name: Deploy Backend Container App to Staging
      run: |
        az containerapp update \
          --name simple-task-backend-app-${{ env.APP_NAME_SUFFIX }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/simple-task-backend:latest \
          --environment ${{ env.AZURE_CONTAINER_APP_ENV }}

    - name: Deploy Frontend Container App to Staging
      run: |
        az containerapp update \
          --name simple-task-frontend-app-${{ env.APP_NAME_SUFFIX }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/simple-task-frontend:latest \
          --environment ${{ env.AZURE_CONTAINER_APP_ENV }} \
          --env-vars REACT_BASE_BACKEND_URL="https://${{ steps.get_backend_url.outputs.backend_fqdn }}"

    - name: Get Staging Frontend App URL
      run: |
        FRONTEND_APP_URL=$(az containerapp show \
          --name simple-task-frontend-app-${{ env.APP_NAME_SUFFIX }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query properties.latestRevisionFqdn \
          --output tsv)
        echo "Staging Frontend URL: https://$FRONTEND_APP_URL"
        # This URL will be printed in the workflow logs. You can manually copy it for your README.md.